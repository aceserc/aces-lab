/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppImport } from './routes/_app'

// Create Virtual Routes

const homeIndexLazyImport = createFileRoute('/(home)/')()
const ToolsLetterGeneratorIndexLazyImport = createFileRoute(
  '/tools/letter-generator/',
)()

// Create/Update Routes

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const homeIndexLazyRoute = homeIndexLazyImport
  .update({
    id: '/(home)/',
    path: '/',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(home)/index.lazy').then((d) => d.Route))

const ToolsLetterGeneratorIndexLazyRoute =
  ToolsLetterGeneratorIndexLazyImport.update({
    id: '/tools/letter-generator/',
    path: '/tools/letter-generator/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/tools/letter-generator/index.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/(home)/': {
      id: '/(home)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof homeIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/tools/letter-generator/': {
      id: '/tools/letter-generator/'
      path: '/tools/letter-generator'
      fullPath: '/tools/letter-generator'
      preLoaderRoute: typeof ToolsLetterGeneratorIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '': typeof AppRoute
  '/': typeof homeIndexLazyRoute
  '/tools/letter-generator': typeof ToolsLetterGeneratorIndexLazyRoute
}

export interface FileRoutesByTo {
  '': typeof AppRoute
  '/': typeof homeIndexLazyRoute
  '/tools/letter-generator': typeof ToolsLetterGeneratorIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRoute
  '/(home)/': typeof homeIndexLazyRoute
  '/tools/letter-generator/': typeof ToolsLetterGeneratorIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/tools/letter-generator'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/' | '/tools/letter-generator'
  id: '__root__' | '/_app' | '/(home)/' | '/tools/letter-generator/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRoute
  homeIndexLazyRoute: typeof homeIndexLazyRoute
  ToolsLetterGeneratorIndexLazyRoute: typeof ToolsLetterGeneratorIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRoute,
  homeIndexLazyRoute: homeIndexLazyRoute,
  ToolsLetterGeneratorIndexLazyRoute: ToolsLetterGeneratorIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/(home)/",
        "/tools/letter-generator/"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx"
    },
    "/(home)/": {
      "filePath": "(home)/index.lazy.tsx"
    },
    "/tools/letter-generator/": {
      "filePath": "tools/letter-generator/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
